---
  - name: install postgres
    apt: pkg=postgresql-9.3 update_cache=yes cache_valid_time=604800

  - name: install psycopg2
    apt: pkg=python-psycopg2

  - name: install postgis
    apt: pkg=postgis

  - name: install osm2pgsql
    apt: pkg=osm2pgsql

  - name: write postgres.conf file
    template: src=templates/postgresql.conf.j2 dest=/etc/postgresql/9.3/main/postgresql.conf
    notify: restart postgresql

  - name: write pg_hba.conf file
    template: src=templates/pg_hba.conf.j2 dest=/etc/postgresql/9.3/main/pg_hba.conf
    notify: restart postgresql

  - name: create .pgpass file
    template: src=templates/pgpass.j2 dest=~/.pgpass mode=0600
    sudo: no

  - name: create db user
    sudo_user: postgres
    postgresql_user: name={{ db_user }}
                     password={{ db_password }}
                     encrypted=false

  - name: create osm database
    sudo_user: postgres
    postgresql_db: name={{ db_name }} owner={{ db_user }}

  - name: enable postgis on osm database
    sudo_user: postgres
    command: psql -d {{ db_name }} -c 'CREATE EXTENSION IF NOT EXISTS postgis;'

  - name: enable hstore on osm database
    sudo_user: postgres
    command: psql -d {{ db_name }} -c 'CREATE EXTENSION IF NOT EXISTS hstore;'

  - name: make osm dir
    file: path={{ osm_dir}} recurse=yes state=directory owner={{ ansible_ssh_user }}
    when: metro_extracts

  - name: make metro extract dir
    file: path={{ metro_tmp_dir}} recurse=yes state=directory
    when: metro_extracts
    sudo: no

  - name: download metro extracts
    get_url: url=https://s3.amazonaws.com/metro-extracts.mapzen.com/{{ item }}.osm.pbf dest={{ metro_tmp_dir }}/{{ item }}.osm.pbf
    with_items: metro_extracts
    when: metro_extracts
    sudo: no

  - name: make geofabrik extract dirs
    file: path={{ geofabrik_tmp_dir}}/{{ item | dirname }} recurse=yes state=directory
    with_items: geofabrik_extracts
    when: geofabrik_extracts
    sudo: no

  - name: download geofabrik extracts
    get_url: url=http://download.geofabrik.de/{{ item }}-latest.osm.pbf dest={{ geofabrik_tmp_dir}}/{{ item }}.osm.pbf
    with_items: geofabrik_extracts
    sudo: no

  - name: create database and import first metro extract
    command: osm2pgsql  --create --slim --cache 100 --cache-strategy sparse --multi-geometry --host localhost --database {{ db_name }} --user {{ db_user }} {{ metro_tmp_dir}}/{{ item }}.osm.pbf
    with_items: metro_extracts|first
    when: metro_extracts
    sudo: no

  - name: append the rest of the metro extracts to the database
    command: osm2pgsql  --append --slim --cache 100 --cache-strategy sparse --multi-geometry --host localhost --database {{ db_name }} --user {{ db_user }} {{ metro_tmp_dir}}/{{ item }}.osm.pbf
    with_items: metro_extracts[1:] if metro_extracts else []
    when: metro_extracts
    sudo: no

  - name: create database and import first geofabrik extract
    command: osm2pgsql  --create --slim --cache 100 --cache-strategy sparse --host localhost --database {{ db_name }} --user {{ db_user }} {{ geofabrik_tmp_dir }}/{{ item }}.osm.pbf
    with_items: geofabrik_extracts|first
    when: geofabrik_extracts and not metro_extracts
    sudo: no

  - name: don't create database and append first geofabrik extract
    command: osm2pgsql  --append --slim --cache 100 --cache-strategy sparse --host localhost --database {{ db_name }} --user {{ db_user }} {{ geofabrik_tmp_dir }}/{{ item }}.osm.pbf
    with_items: geofabrik_extracts|first
    when: geofabrik_extracts and metro_extracts
    sudo: no

  - name: append the rest of the geofabrik extracts to the database
    command: osm2pgsql  --append --slim --cache 100 --cache-strategy sparse --host localhost --database {{ db_name }} --user {{ db_user }} {{ geofabrik_tmp_dir }}/{{ item }}.osm.pbf
    when: geofabrik_extracts[1:]
    with_items: geofabrik_extracts[1:] if geofabrik_extracts else []
    sudo: no
